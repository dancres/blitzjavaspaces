####################################################
# Example Berkeley DB, Java Edition property file
# Each parameter is set to its default value
####################################################

# Use ConsoleHandler in logging system.
java.util.logging.ConsoleHandler.on=false

# Use DbLogHandler in logging system.
#java.util.logging.DbLogHandler.on=true

# Log file count for FileHandler.
# minimum = 1
#java.util.logging.FileHandler.count=10

# Log file limit for FileHandler.
# minimum = 1000
# maximum = 1000000000
#java.util.logging.FileHandler.limit=10000000

# Use FileHandler in logging system.
#java.util.logging.FileHandler.on=false

# Trace messages equal and above this level will be logged.
# Value should be one of the predefined java.util.logging.Level values
#java.util.logging.level=CONFIG

# Cleaner specific detailed trace messages will be issued at this
# level. The Value should be one of the predefined 
# java.util.logging.Level values
java.util.logging.level.cleaner=CONFIG

# Evictor specific trace messages will be issued at this level.
# Value should be one of the predefined java.util.logging.Level values
java.util.logging.level.evictor=CONFIG

# Lock manager specific trace messages will be issued at this level.
# Value should be one of the predefined java.util.logging.Level values
#java.util.logging.level.lockMgr=CONFIG

# Recovery specific trace messages will be issued at this level.
# Value should be one of the predefined java.util.logging.Level values
#java.util.logging.level.recovery=CONFIG

# Ask the checkpointer to run every time we write this many bytes
# to the log. If set, supercedes je.checkpoint.wakeupInterval. To
# use time based checkpointing, set this to 0.
# minimum = 0
# maximum = 9223372036854775807
je.checkpointer.bytesInterval=20000000

# The number of times to retry a checkpoint if it runs into a deadlock.
# minimum = 0
# maximum = 2147483647
#je.checkpointer.deadlockRetry=3

# The checkpointer wakeup interval in microseconds. By default, this
# is inactive and we wakeup the checkpointer as a function of the
# number of bytes written to the log. (je.checkpointer.bytesInterval)
# minimum = 1000000
# maximum = 4294967296
#je.checkpointer.wakeupInterval=0

# The cleaner checks disk utilization every time we write this many
# bytes to the log.  If zero (and by default) it is set to the
# je.log.fileMax value divided by four.
# minimum = 0
# maximum = 9223372036854775807
#je.cleaner.bytesInterval=0

# The number of times to retry cleaning if a deadlock occurs.
# The default is set to 3.
# minimum = 0
# maximum = 2147483647
#je.cleaner.deadlockRetry=3

# If true, the cleaner deletes log files after successful cleaning.
# If false, the cleaner changes log file extensions to .DEL
# instead of deleting them. The default is set to true.
je.cleaner.expunge=true

# The lock timeout for cleaner transactions in microseconds.
# The default is set to 0.5 seconds.
# minimum = 0
# maximum = 4294967296
#je.cleaner.lockTimeout=500000

# The percentage of the je.maxDiskSpace setting at which aggressive
# cleaning measures will be taken.
# ** This is an experimental setting and is unsupported. **
# minimum = 1
# maximum = 100
#je.cleaner.maxDiskSpaceTolerance=5

# The minimum age of a file (number of files between it and the
# active file) to qualify it for cleaning under any conditions.
# The default is set to 2.
# minimum = 1
# maximum = 1000
#je.cleaner.minAge=2

# The cleaner will keep the disk space utilization percentage above
# this value. The default is set to 50 percent.
# minimum = 0
# maximum = 90
#je.cleaner.minUtilization=50

# The number of files to clean after retries is exceeded,
# before retrying the file again.  The default is set to 5.
# minimum = 0
# maximum = 1000
#je.cleaner.restartRetries=5

# The number of times to retry a file when cleaning fails because
# the application is writing to the file.  The default is set to 10.
# minimum = 0
# maximum = 1000
#je.cleaner.retries=10

# Number of times to retry a compression run if a deadlock occurs.
# minimum = 0
# maximum = 2147483647
je.compressor.deadlockRetry=3

# The lock timeout for compressor transactions in microseconds.
# minimum = 0
# maximum = 4294967296
je.compressor.lockTimeout=500000

# The compressor wakeup interval in microseconds.
# minimum = 1000000
# maximum = 4294967296
je.compressor.wakeupInterval=5000000

# Debugging support: check leaked locks and txns at env close.
je.env.checkLeaks=true

# Debugging support: call Thread.yield() at strategic points.
#je.env.forcedYield=false

# If true, create the environment read only.
#je.env.isReadOnly=false

# If true, create the environment w/ transactions.
je.env.isTransactional=true

# If true, an environment is created with recovery and the related
# daemons threads enabled.
je.env.recovery=true

# If true, starts up the checkpointer at environment creation.
je.env.runCheckpointer=false

# If true, starts up the cleaner at environment creation.
je.env.runCleaner=true

# If true, starts up the evictor at environment creation.
je.env.runEvictor=true

# If true, starts up the INCompressor at environment creation.
je.env.runINCompressor=true

# The number of times to retry the evictor if it runs into a deadlock.
# minimum = 0
# maximum = 2147483647
je.evictor.deadlockRetry=3

# The evictor percentage of scanned nodes to evict per wakeup.
# minimum = 1
# maximum = 100
je.evictor.evictionBatchPercentage=10

# The evictor percentage of total nodes to scan per wakeup.
# minimum = 1
# maximum = 100
je.evictor.nodeScanPercentage=10

# When eviction happens, the evictor will push memory usage to this
# percentage of je.maxMemory.

# minimum = 50
# maximum = 100
je.evictor.useMemoryFloor=80

# The lock timeout in microseconds.
# minimum = 1000
# maximum = 4294967296
#je.lock.timeout=500000
je.lock.timeout=0

# maximum starting size of a JE log buffer
# minimum = 1024
je.log.bufferSize=1048576

# If true, perform a checksum check when reading entries from log.
#je.log.checksumRead=true
je.log.checksumRead=false

# The buffer size for faulting in objects from disk, in bytes.
# minimum = 32
je.log.faultReadSize=2048

# The size of the file handle cache.
# minimum = 3
je.log.fileCacheSize=100

# The maximum size of each individual JE log file, in bytes.
# minimum = 64
# maximum = 4294967296
je.log.fileMax=10000000

# Timeout limit for group file sync, in microseconds.
# minimum = 10000
je.log.fsyncTimeout=500000

# The buffer size for log iterators, such as in recovery, in bytes.
# minimum = 128
je.log.iteratorReadSize=1024

# If true, operates in an in-memory fashion without
# flushing the log to disk. The system operates until it runs
# out of memory, in which case a java.lang.OutOfMemory error is
# thrown.
je.log.memOnly=false

# The number of JE log buffers
# minimum = 2
je.log.numBuffers=5

# The total memory taken by log buffers, in bytes. If 0, use
# 7% of je.maxMemory
# minimum = 25
je.log.totalBufferBytes=4620000

# The maximum disk space that may be used by the JE environment.
# ** This is an experimental setting and is unsupported. **
# minimum = 1024
#je.maxDiskSpace=9223372036854775807

# The Total memory used by JE, in bytes. The system attempts to stay
# within this budget and will evict database objects when it comes
# within a prescribed margin of the limit. The default is set to 
# the approximate memory available to a JVM with -Xmx64M.
# minimum = 1024
je.maxMemory=66000000

# The maximum number of entries in a internal btree node.
# minimum = 4
# maximum = 32767
je.nodeMaxEntries=128

# If less than this percentage of entries are changed on a BIN,
# logs a delta instead of a full version.
# minimum = 0
# maximum = 75
je.tree.binDelta=25

# After this many deltas, logs a full version.
# minimum = 0
# maximum = 100
je.tree.maxDelta=10

# The transaction timeout, in microseconds. A value of 0 means no limit.
# minimum = 0
# maximum = 4294967296
je.txn.timeout=0

