import net.jini.discovery.DiscoveryGroupManagement;

import java.util.logging.Level;

import net.jini.security.BasicProxyPreparer;

import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.jeri.ProxyTrustILFactory;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;

import org.dancres.blitz.stats.Switch;
import org.dancres.blitz.stats.OpSwitch;
import org.dancres.blitz.stats.InstanceSwitch;
import org.dancres.blitz.remote.debug.DebugILFactory;
import org.dancres.blitz.config.Persistent;
import org.dancres.blitz.config.TimeBarrierPersistent;
import org.dancres.blitz.config.Transient;
import org.dancres.blitz.config.*;

org.dancres.blitz {

	
	discovery_SpaceTestEntry=new EntryConstraint[]{new CacheSize(1024),new Fifo()};
    org_dancres_blitz_test_DummyEntry=new EntryConstraint[]{new CacheSize(30),new Fifo()};

    // entryReposReadahead = 512;

// Default logging level
    defaultLogLevel = Level.SEVERE;
	// Default Stats to make available
    	stats = new Switch[] {new OpSwitch(OpSwitch.ALL_TYPES,
    		OpSwitch.TAKE_OPS, true),
    		new OpSwitch(OpSwitch.ALL_TYPES, OpSwitch.READ_OPS, true),
    		new OpSwitch(OpSwitch.ALL_TYPES, OpSwitch.WRITE_OPS, true),
    		new InstanceSwitch(InstanceSwitch.ALL_TYPES, true)};
    // Examples of setting log levels for specific components
    //
    // org_dancres_blitz_disk_SleeveCacheLogLevel = Level.ALL;
    // org_dancres_blitz_disk_StorageLogLevel = Level.ALL;

    // Published on the proxy as a Name attribute
    name = "Blitz JavaSpace";
	// The initial lookup groups to register with - after first boot
    // this information is held in a meta database and should be configured
    // via JoinAdmin
    initialGroups = new String[]{"incaX"};
    
    initialAttrs=new net.jini.core.entry.Entry[]{
    	org.dancres.blitz.serviceui.DashboardUI.getUIDescriptor()
    };
    
    // loginContext =

    // Location to store meta info and entrys
    persistDir = "deploy/log/transient-jdbfiles_dancres";

    // Location of log files - SHOULD BE DIFFERENT FROM ABOVE
    // logDir = "/blitzlog";
    logDir = "deploy/log/transient-jdbfiles_dancres/prevlog";

   // Maximum number of async write threads
    // DO NOT CHANGE THIS - BLITZ DOESN'T SUPPORT MORE THAN ONE WRITE THREAD
    // (YET!)
    //
    maxWriteThreads = 1;

    // How long to keep write threads alive in the pool
    //
    threadKeepalive = 15;

    // The preferred queue size for pending writes
    //
    desiredPendingWrites = 10;
    // desiredPendingWrites = 20;
    // desiredPendingWrites = 0;

    // Size of the berkeley DB cache
    //
    dbCache = 134217728;

    // dbCache = 33554432;
    // dbCache = 16777216;
    // dbCache = 8388608;

    // Configures the maximum number of concurrent Db transactions
    // Bigger is better!  This value has been validated for 64 concurrent
    // JavaSpace operations
    //
    maxDbTxns = 256;

    // Dump Db statistics after every checkpoint if this is true
    // WARNING: dumping stats is broken in 4.1.25 - 
    // ask Dan (dan@dancres.org) for a patch.  This should be fixed in Db 4.2,
    // will test and then post an update to the website
    //
    dumpDbStats = new Boolean(false);
    // dumpDbStats = new Boolean(true);

    // Dump statistics for write queue usage
    // When tuning/configuring Blitz for various systems, these stats help
    // to determine I/O performance requirements and required memory
    //
    dumpWQStats = new Boolean(false);
    // dumpWQStats = new Boolean(true);

    // Turn this on to get reports on checkpointing behaviour - useful for
    // tuning
    logCkpts = new Boolean(true);

    // Maximum number of entry instances to cache for a particular Entry type
    //
    // entryReposCacheSize = 2000;
    // entryReposCacheSize = 1000;
    // entryReposCacheSize = 1;
    // entryReposCacheSize = 200;
    entryReposCacheSize = 5000;

    // Non-blocking transactions are used within the entry package to
    // prevent deadlock.  Such transactions can fail and require aborting
    // should they fail to get a lock.  When this happens, the thread
    // attempting the transaction will backoff by an amount of time dictated
    // by base_backoff + Random(jitter) ms which should allow the conflicting
    // transaction time to complete.  Format is {base_backoff, jitter}
    loadBackoff = new int[] {50, 50};

    // The maximum allowable lease time for entries and notify registrations
    // To permit Lease.FOREVER, set the LeaseBound = 0.
    // To deny Lease.FOREVER and set an upper limit on lease time set the
    // LeaseBound to a positive non-zero value in milliseconds
    //
    entryLeaseBound = 0;
    notifyLeaseBound = 0;

    // How often to do an active cleanup of lease expired resources
    // Value should be ms - 0 disables active cleanup
    //
    leaseReapInterval = 0;
    // leaseReapInterval = 60000;
    // leaseReapInterval = 10000;
    // leaseReapInterval = 1800000;

    // Number of OID allocators to use for entries
    maxOidAllocators = 512;

    // How often to log event allocation to disk
    //
    eventgenSaveInterval = 50;

    // How big a jump in notify sequence numbers there should be following
    // restart/crash
    //
    eventgenRestartJump = 1000;

    // Maximum number of task threads to be used in posting remote events
    // and dispatching blocked takes or reads
    //
    maxTaskThreads = 10;

    storageModel = new Transient();
    
    // debugPort = 0;
    debugPort = 12349;

   
    // The initial attributes to register with - note that these need to be
    // available as part of the codebase.
    // This information is held in a meta database and should be configured
    // via JoinAdmin
    // initialAttrs = new Entry[] {};

    // The exporter to use - see the JINI documentation
    //
    serverExporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                         new ProxyTrustILFactory(null, null), false, true);

    // Blitz provides a suitable default for all these but this is how you'd
    // configure them explicitly
    notifyPreparer = new BasicProxyPreparer();
    recoveredNotifyPreparer = new BasicProxyPreparer();
    txnPreparer = new BasicProxyPreparer();
    recoveredTxnPreparer = new BasicProxyPreparer();
    activationIdPreparer = new BasicProxyPreparer();
    activationSysPreparer = new BasicProxyPreparer();
}
